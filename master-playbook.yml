---
- hosts: all
  become: true
  become_user: root
  become_method: sudo
  tasks:

# Installing packages: docker-ce, docker-ce-cli, containerd.io and then adding a user named “vagrant” to the “docker” group.
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io # Container manager
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

# Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code.
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0      

# Step 2.3: Installing kubelet, kubeadm and kubectl for managing k8s cluster.
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

# Adding line with node IP to /etc/default/kubelet
  - name: Configure IP of node
    lineinfile:
      create: yes
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ master_node_ip }}

  # - name: Create Containerd directory
  #   command: mkdir -p /etc/containerd
  - name: Ensure /etc/containerd directory exists
    become: true
    file:
      path: /etc/containerd
      state: directory

  - name: Restart docker
    service:
      name: docker
      daemon_reload: yes
      state: restarted

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
      
  # Generate default config and stream to /etc/containerd/config.toml
  # - name: Create Config
  #   command: sh -c "containerd config default > /etc/containerd/config.toml"
  - name: Generate and place default config
    become: true
    command: containerd config default
    register: containerd_config_output
  - name: Create Config file
    become: true
    copy:
      content: "{{ containerd_config_output.stdout }}"
      dest: /etc/containerd/config.toml

# Restart Docker nad k8s
  - name: Restart containerd
    service:
      name: containerd
      daemon_reload: yes
      state: restarted
      
  # Pull required containers for cluster ube-apiserver, kube-controller-manager, kube-scheduler, kube-proxy etc
  - name: Pull Required Images
    command: kubeadm config images pull

  # Initialize cluster with kubeadm
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address={{ master_node_ip }} --apiserver-cert-extra-sans={{ master_node_ip }} --node-name demo-k8s-controlplane --pod-network-cidr=192.168.0.0/16

  # Setup the kube config file for the vagrant user to access the Kubernetes cluster
  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config

  # Setup the container networking provider and the network policy engine using calico template.
  - name: Install calico pod network
    become: false
    command: kubectl create -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml    
    when: installcalico is defined

  # Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command.
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  # Check status of saved command
  - debug:
      msg: "{{ join_command }}"

  - name: Copy join command to local file
    become: no
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

# Setup a handler for checking Docker daemon.
  handlers:
    - name: docker status
      service: name=docker state=started